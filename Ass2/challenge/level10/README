The bug is that you can do out of bounds memory accesses on the arguments variable in functions.
We start by putting everything in an if statement so it executes at once then we  calculate the base offset using the ret leak.
The way we construct our payload is that first we jump to ```0x54545454``` then we jump to ```0xf050f5f58```. This works as after execution the program continues normally. we use a variable inside the function in order to switch execution paths for example the ```i = 1``` line. between jumps we also do ```arguments[-8] += 0x2f``` as it i wanted to remove the null bytes and was getting errors otherwise. we execute push rsp first so that rdi will have the location of the stack on it. we follow this by putting l33t on the stack starting at where the pushed rsp would point at. we then pop the correct values into rdi in order for the syscall to work.